import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:8787';

class SessionListExample {
    constructor() {
        this.baseUrl = BASE_URL;
    }

    /**
     * Lista todas as sess√µes do sistema
     */
    async listAllSessions() {
        console.log('üìã Listando todas as sess√µes...\n');
        
        try {
            const response = await fetch(`${this.baseUrl}/chat/sessions`);
            const data = await response.json();
            
            console.log(`‚úÖ Total de sess√µes: ${data.pagination.total}`);
            console.log(`üìä Exibindo: ${data.sessions.length} sess√µes\n`);
            
            data.sessions.forEach((session, index) => {
                console.log(`${index + 1}. üÜî ${session.sessionId}`);
                console.log(`   üìä Status: ${this.formatStatus(session.status)}`);
                console.log(`   üïê Criada: ${new Date(session.createdAt).toLocaleString('pt-BR')}`);
                console.log(`   üîÑ √öltima atividade: ${new Date(session.lastActivity).toLocaleString('pt-BR')}`);
                console.log(`   üí¨ Mensagens: ${session.messageCount}`);
                console.log(`   üìç Contexto: ${this.formatContext(session.context)}`);
                
                if (session.lastMessages.length > 0) {
                    console.log(`   üìù √öltimas mensagens:`);
                    session.lastMessages.forEach(msg => {
                        const icon = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                        console.log(`      ${icon} ${msg.content}`);
                    });
                }
                console.log('');
            });
            
            return data;
        } catch (error) {
            console.error('‚ùå Erro ao listar sess√µes:', error.message);
        }
    }

    /**
     * Lista apenas sess√µes ativas
     */
    async listActiveSessions() {
        console.log('üü¢ Listando sess√µes ativas...\n');
        
        try {
            const response = await fetch(`${this.baseUrl}/chat/sessions?status=active`);
            const data = await response.json();
            
            if (data.sessions.length === 0) {
                console.log('üì≠ Nenhuma sess√£o ativa encontrada.\n');
                return data;
            }
            
            console.log(`‚úÖ Sess√µes ativas: ${data.sessions.length}\n`);
            
            data.sessions.forEach((session, index) => {
                console.log(`${index + 1}. üÜî ${session.sessionId.substring(0, 20)}...`);
                console.log(`   ‚è±Ô∏è  Ativa h√°: ${this.calculateDuration(session.lastActivity)}`);
                console.log(`   üìç Local: ${session.context.location || 'N√£o definido'}`);
                console.log(`   üìÖ Data: ${session.context.date || 'N√£o definida'}`);
                console.log(`   üí¨ ${session.messageCount} mensagens trocadas\n`);
            });
            
            return data;
        } catch (error) {
            console.error('‚ùå Erro ao listar sess√µes ativas:', error.message);
        }
    }

    /**
     * Lista sess√µes com pagina√ß√£o
     */
    async listSessionsWithPagination(limit = 5, offset = 0) {
        console.log(`üìÑ Listando sess√µes com pagina√ß√£o (limite: ${limit}, offset: ${offset})...\n`);
        
        try {
            const response = await fetch(`${this.baseUrl}/chat/sessions?limit=${limit}&offset=${offset}`);
            const data = await response.json();
            
            console.log(`üìä P√°gina atual: ${Math.floor(offset / limit) + 1}`);
            console.log(`üìã Mostrando ${data.sessions.length} de ${data.pagination.total} sess√µes`);
            console.log(`‚û°Ô∏è  H√° mais p√°ginas: ${data.pagination.hasMore ? 'Sim' : 'N√£o'}\n`);
            
            data.sessions.forEach((session, index) => {
                const globalIndex = offset + index + 1;
                console.log(`${globalIndex}. ${session.sessionId.substring(0, 25)}...`);
                console.log(`    Status: ${this.formatStatus(session.status)} | Mensagens: ${session.messageCount}`);
                console.log('');
            });
            
            return data;
        } catch (error) {
            console.error('‚ùå Erro ao listar sess√µes com pagina√ß√£o:', error.message);
        }
    }

    /**
     * Obt√©m detalhes completos de uma sess√£o espec√≠fica
     */
    async getSessionDetails(sessionId) {
        console.log(`üîç Obtendo detalhes da sess√£o: ${sessionId}\n`);
        
        try {
            const response = await fetch(`${this.